#!/bin/bash

echo "üß™ TEST COMPLET - Page Workouts"
echo "=================================="

# Couleurs pour les tests
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables
BASE_URL="http://localhost:3000"
WORKOUTS_URL="$BASE_URL/workouts"
DASHBOARD_URL="$BASE_URL/dashboard"

echo -e "${BLUE}üìã V√©rification du serveur...${NC}"
sleep 3

# Test 1: V√©rifier que le serveur r√©pond
echo -e "\n${YELLOW}1Ô∏è‚É£ Test de connectivit√© du serveur${NC}"
if curl -s -o /dev/null -w "%{http_code}" "$BASE_URL" | grep -q "200"; then
    echo -e "${GREEN}‚úÖ Serveur accessible${NC}"
else
    echo -e "${RED}‚ùå Serveur non accessible${NC}"
    echo "D√©marrage du serveur..."
    cd grind-live && npm run dev &
    sleep 5
fi

# Test 2: V√©rifier la page workouts
echo -e "\n${YELLOW}2Ô∏è‚É£ Test de la page workouts${NC}"
WORKOUTS_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$WORKOUTS_URL")
if [ "$WORKOUTS_RESPONSE" = "200" ]; then
    echo -e "${GREEN}‚úÖ Page workouts accessible${NC}"
else
    echo -e "${RED}‚ùå Page workouts non accessible (HTTP $WORKOUTS_RESPONSE)${NC}"
fi

# Test 3: V√©rifier les hooks et fonctionnalit√©s
echo -e "\n${YELLOW}3Ô∏è‚É£ Test des hooks et fonctionnalit√©s${NC}"

# V√©rifier les fichiers des hooks
HOOKS=("useWorkouts" "useFavorites" "useExplorer" "useUser")
for hook in "${HOOKS[@]}"; do
    if [ -f "src/hooks/$hook.ts" ]; then
        echo -e "${GREEN}‚úÖ Hook $hook.ts pr√©sent${NC}"
    else
        echo -e "${RED}‚ùå Hook $hook.ts manquant${NC}"
    fi
done

# Test 4: V√©rifier les composants UI
echo -e "\n${YELLOW}4Ô∏è‚É£ Test des composants UI${NC}"
UI_COMPONENTS=("button" "dialog" "card" "form" "input")
for component in "${UI_COMPONENTS[@]}"; do
    if [ -f "src/components/ui/$component.tsx" ]; then
        echo -e "${GREEN}‚úÖ Composant $component.tsx pr√©sent${NC}"
    else
        echo -e "${RED}‚ùå Composant $component.tsx manquant${NC}"
    fi
done

# Test 5: V√©rifier les types TypeScript
echo -e "\n${YELLOW}5Ô∏è‚É£ Test des types TypeScript${NC}"
if [ -f "src/lib/types.ts" ]; then
    echo -e "${GREEN}‚úÖ Types TypeScript pr√©sents${NC}"
else
    echo -e "${RED}‚ùå Types TypeScript manquants${NC}"
fi

# Test 6: V√©rifier la configuration Supabase
echo -e "\n${YELLOW}6Ô∏è‚É£ Test de la configuration Supabase${NC}"
if [ -f "src/lib/supabaseClient.ts" ]; then
    echo -e "${GREEN}‚úÖ Client Supabase configur√©${NC}"
else
    echo -e "${RED}‚ùå Client Supabase manquant${NC}"
fi

# Test 7: V√©rifier les API routes
echo -e "\n${YELLOW}7Ô∏è‚É£ Test des API routes${NC}"
API_ROUTES=("feed" "progression" "challenges" "daily-goals")
for route in "${API_ROUTES[@]}"; do
    API_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/api/$route")
    if [ "$API_RESPONSE" = "401" ] || [ "$API_RESPONSE" = "200" ]; then
        echo -e "${GREEN}‚úÖ API /api/$route r√©pond (HTTP $API_RESPONSE)${NC}"
    else
        echo -e "${RED}‚ùå API /api/$route ne r√©pond pas (HTTP $API_RESPONSE)${NC}"
    fi
done

# Test 8: V√©rifier les fonctionnalit√©s de la page
echo -e "\n${YELLOW}8Ô∏è‚É£ Test des fonctionnalit√©s de la page${NC}"

# Extraire le contenu de la page workouts
WORKOUTS_CONTENT=$(curl -s "$WORKOUTS_URL")

# V√©rifier les √©l√©ments cl√©s
if echo "$WORKOUTS_CONTENT" | grep -q "Mes s√©ances"; then
    echo -e "${GREEN}‚úÖ Onglet 'Mes s√©ances' pr√©sent${NC}"
else
    echo -e "${RED}‚ùå Onglet 'Mes s√©ances' manquant${NC}"
fi

if echo "$WORKOUTS_CONTENT" | grep -q "Explorer"; then
    echo -e "${GREEN}‚úÖ Onglet 'Explorer' pr√©sent${NC}"
else
    echo -e "${RED}‚ùå Onglet 'Explorer' manquant${NC}"
fi

if echo "$WORKOUTS_CONTENT" | grep -q "Favoris"; then
    echo -e "${GREEN}‚úÖ Onglet 'Favoris' pr√©sent${NC}"
else
    echo -e "${RED}‚ùå Onglet 'Favoris' manquant${NC}"
fi

if echo "$WORKOUTS_CONTENT" | grep -q "Cr√©er une nouvelle s√©ance"; then
    echo -e "${GREEN}‚úÖ Bouton de cr√©ation pr√©sent${NC}"
else
    echo -e "${RED}‚ùå Bouton de cr√©ation manquant${NC}"
fi

if echo "$WORKOUTS_CONTENT" | grep -q "GRIND"; then
    echo -e "${GREEN}‚úÖ Logo GRIND pr√©sent${NC}"
else
    echo -e "${RED}‚ùå Logo GRIND manquant${NC}"
fi

# Test 9: V√©rifier les erreurs dans la console
echo -e "\n${YELLOW}9Ô∏è‚É£ Test des erreurs JavaScript${NC}"
echo "V√©rifiez manuellement la console du navigateur pour les erreurs JavaScript"

# Test 10: V√©rifier la responsivit√©
echo -e "\n${YELLOW}üîü Test de la responsivit√©${NC}"
echo "Testez manuellement sur diff√©rentes tailles d'√©cran"

echo -e "\n${BLUE}üìä R√âSUM√â DES TESTS${NC}"
echo "=========================="
echo "‚úÖ Tests de connectivit√©"
echo "‚úÖ Tests des hooks"
echo "‚úÖ Tests des composants"
echo "‚úÖ Tests des API routes"
echo "‚úÖ Tests des fonctionnalit√©s"
echo "‚ö†Ô∏è  Tests manuels requis pour :"
echo "   - Erreurs JavaScript"
echo "   - Responsivit√©"
echo "   - Interactions utilisateur"

echo -e "\n${GREEN}üéâ Tests termin√©s !${NC}"
echo "Ouvrez http://localhost:3000/workouts dans votre navigateur pour tester manuellement." 